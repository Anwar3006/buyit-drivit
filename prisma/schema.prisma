generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String             @id @default(uuid())
  clerkId    String             @unique
  email      String             @unique
  name       String?
  imageUrl   String?
  phone      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  role       UserRole           @default(USER)
  testDrives TestDriveBooking[]
  savedCars  UserSavedCar[]
}

model Car {
  id                 String             @id @default(uuid())
  make               String
  model              String
  year               Int
  price              Decimal            @db.Decimal(10, 2)
  mileage            Int
  color              String
  fuelType           String
  bodyType           String
  transmission       String
  description        String
  seats              Int?
  status             CarStatus          @default(AVAILABLE)
  featured           Boolean            @default(false)
  images             String[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  testDrivesBookings TestDriveBooking[]
  savedBy            UserSavedCar[]

  @@index([make, model])
  @@index([bodyType])
  @@index([fuelType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([featured])
}

model UserSavedCar {
  id      String   @id @default(uuid())
  userId  String
  carId   String
  savedAt DateTime @default(now())
  car     Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model TestDriveBooking {
  id          String        @id @default(uuid())
  userId      String
  carId       String
  bookingDate DateTime      @db.Date
  startTime   String
  endTime     String
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  car         Car           @relation(fields: [carId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([carId])
  @@index([bookingDate])
  @@index([status])
}

model DealershipInfo {
  id           String         @id @default(uuid())
  email        String         @default("contact@bitdit.com")
  name         String         @default("BuyIt_DrivIt")
  phone        String         @default("+233 54 333 9109")
  address      String         @default("104 Lomo Adawu Street, La Wireless, Accra")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  workingHours WorkingHours[]
}

model WorkingHours {
  id           String         @id @default(uuid())
  dealershipId String
  dayOfWeek    DayOfWeek
  openTime     String
  closeTime    String
  isOpen       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  dealership   DealershipInfo @relation(fields: [dealershipId], references: [id], onDelete: Cascade)

  @@unique([dealershipId, dayOfWeek], map: "WorkingHours_dealsershipId_dayOfWeek_key")
  @@index([dayOfWeek])
  @@index([isOpen])
  @@index([dealershipId], map: "WorkingHours_dealsershipId_idx")
}

enum UserRole {
  USER
  ADMIN
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
  SOLD
}

enum BookingStatus {
  CONFIRMED
  COMPLETED
  CANCELLED
  PENDING
  NO_SHOW
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
